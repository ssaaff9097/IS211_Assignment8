import random
import time
import argparse

class Die: 
    def __init__(self, sides=6):
        self.sides = sides

    def roll(self): 
        return random.randint(1, self.sides)

class Player: 
    def __init__ (self, name):
        self.name = name
        self.score = 0
    
    def add_score(self, points):
        self.score += points

class HumanPlayer(Player):
    pass
    
class ComputerPlayer(Player):
    def __init__(self, name):
        super().__init__(name)
    
    def decide_roll(self):
        hold_limit = min(25, 100 - self.score)
        return hold_limit 

class PlayerFactory:
    def create_player(player_type, name):
        if player_type == "human":
            return HumanPlayer(name)
        elif player_type == "computer":
            return ComputerPlayer(name)
        else:
            raise ValueError("Invalid player type")
        
class Game:
    def __init__(self, player1, player2):
        self.player1 = player1
        self.player2 = player2
        self.die = Die()
        self.current_turn = self.player1

    def start_game(self):
        while True: 
            self.play_turn()
            if self.check_winner():
                break
            self.current_turn = self.player2 if self.current_turn == self.player2 else self.player1 

    def play_turn(self):
        turn_total = 0 
        while True:
            roll = self.die.roll()
            print(f"{self.current_turn.name} rolled: {roll} ")
            
            if roll == 1:
                print (f"Sorry, {self.current_turn.name}, you lose your turn with no points.")
            return 0
        
            turn_total += roll
            print(f"Turn total: {turn_total}, Total score: {self.current_turn.score}") 
        
        if isinstance(self.current_turn, ComputerPlayer):
            hold_choice = self.current_turn.decide_roll()
            if turn_total >= hold_choice:
                self.current_turn.add_score(turn_total)
                print(f"{self.current_turn.name}'s total scroe is: {self.current_turn.score}") 
                return turn_total 
            
        
        else: 
            choice = input(f"{self.current_turn.name}, (r)oll or (h)old?")
            if choice.lower() == 'h':
                self.current_turn.add_score(turn_total)
                print(f"{self.current_turn.name}'s total score is {self.current_turn.score}")
                return turn_total 
            
    
    def check_winner(self):
        if self.player1.score >= 100:
            print(f"{self.player1.name} wins!")
            return True
        elif self.player2.score >= 100:
            print(f"{self.player2.name} wins!")  
            return True
        return False 
    
class TimedGameProxy:
        def __init__(self, player1, player2):
            self.game = Game(player1, player2)
            self.start_time = time.time() 
        
        def play_turn(self):
            current_time = time.time()
            if current_time - self.start_time >= 60: 
                print("Out of time!")
                return True 
            return self.game.play_turn()
            

        def start_game(self):
            while True:
                if self.play_turn():
                    break
                if self.game.check_winner():
                     break
                self.game.current_turn = self.game.player2 if self.game.current_turn == self.game.player1 else self.game.player1

if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument('--player1', required=True, choices=['human', 'computer'], help='Type of Player 1')
    parser.add_argument('--player2', required=True, choices=['human', 'computer'], help='Type of Player 2') 
    parser.add_argument('--timed', action='store_true', help='Enable timed game mode')

    args = parser.parse_args() 

    player1 = PlayerFactory.create_player(args.player1, "Player1")
    player2 = PlayerFactory.create_player(args.player2, "Player 2")

    if args.timed:
        game = TimedGameProxy(player1, player2)
    else:
        game = Game(player1, player2)
    
    game.start_game() 





